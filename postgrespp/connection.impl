
#include "result.hpp"

namespace postgrespp {

inline void Connection::asyncQueryCb(boost::system::error_code const& ec, size_t const& bt, Callback callback) {
  PGresult* res = nullptr;
  if (!ec) {
    auto ret = PQconsumeInput(m_handle);

    if (!ret)
      std::cerr << PQerrorMessage(m_handle) << std::endl;

    //TODO: need a self call with PQisBusy query here?

    res = PQgetResult(m_handle);
    while (PQgetResult(m_handle) != nullptr)
      ;
  }
  callback(ec, {{res}});
}

template<typename... Args>
inline Connection::Status Connection::queryParams(const char* const& query, Callback callback, Connection::ResultFormat const& resultFormat, Args... args)
{
  char* valptr_array[sizeof...(Args)];
  int len_array[sizeof...(Args)];
  int format_array[sizeof...(Args)];

  fillParamArray(valptr_array, len_array, format_array, args...);

  auto ret = queryParams(query, sizeof...(Args), std::move(callback), resultFormat, valptr_array, len_array, format_array);

  for(size_t i = 0; i < sizeof...(Args); ++i)
  if(format_array[i] == 1)
    delete valptr_array[i];

  return ret;
}

inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array) { }

template<typename... Args>
inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array, int64_t const& value, Args... args)
{
  *valptr_array = new char[sizeof(value)];
  **reinterpret_cast<int64_t**>(valptr_array) = htobe64(value);
  *len_array = sizeof(int64_t);
  *format_array = 1;
  Connection::fillParamArray(++valptr_array, ++len_array, ++format_array, args...);
}

template<typename... Args>
inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array, int32_t const& value, Args... args)
{
  *valptr_array = new char[sizeof(value)];
  **reinterpret_cast<int32_t**>(valptr_array) = htobe32(value);
  *len_array = sizeof(int32_t);
  *format_array = 1;
  Connection::fillParamArray(++valptr_array, ++len_array, ++format_array, args...);
}

template<typename... Args>
inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array, int16_t const& value, Args... args)
{
  *valptr_array = new char[sizeof(value)];
  **reinterpret_cast<int16_t**>(valptr_array) = htobe16(value);
  *len_array = sizeof(int16_t);
  *format_array = 1;
  Connection::fillParamArray(++valptr_array, ++len_array, ++format_array, args...);
}

template<typename... Args>
inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array, int8_t const& value, Args... args)
{
  *valptr_array = new char[sizeof(value)];
  **reinterpret_cast<int8_t**>(valptr_array) = value;
  *len_array = sizeof(int8_t);
  *format_array = 1;
  Connection::fillParamArray(++valptr_array, ++len_array, ++format_array, args...);
}

template<typename... Args>
inline void Connection::fillParamArray(char** valptr_array, int* len_array, int* format_array, const char* const& value, Args... args)
{
  *valptr_array = new char[sizeof(value)];
  *const_cast<const char **>(reinterpret_cast<char**>(valptr_array)) = value;
  *len_array = 0;
  *format_array = 0;
  Connection::fillParamArray(++valptr_array, ++len_array, ++format_array, args...);
}

}// NS postgrespp
